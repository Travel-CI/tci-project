buildscript {

	ext {
		projectGroupName 	= 'com.travelci'
		projectVersion 		= '1.1.0-SNAPSHOT'
		projectName			= 'Travel CI'

		sonarqubeUrl		= 'http://esgi.cloudapp.net:9092'
		sonarqubeToken		= '246b5a19d27a8a6ff48752ffa0d2522fb3f49531'

		projectSourceCompatibility 	= JavaVersion.VERSION_1_8
		projectTargetCompatibility 	= JavaVersion.VERSION_1_8

		sonarqubePluginVersion 	= '2.7'

		springBootVersion		= '2.1.3.RELEASE'
		springCloudVersion 		= 'Greenwich.RELEASE'

		gsonVersion				= '2.7'
		postgresqlVersion 		= '42.0.0'
		jgitVersion				= '5.2.1.201812262042-r'
		dockerClientVersion 	= '8.15.1'
		hk2libForDockerVersion 	= '2.28'
		commonIOVersion			= '2.5'

		junitJupiterVersion 	= '5.4.0'
		restAssuredVersion 		= '3.3.0'
		mockitoVersion			= '2.24.5'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubePluginVersion}"
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'

allprojects {
	group projectGroupName
	version projectVersion
}

sonarqube {
	properties {
		property "sonar.projectName", projectName
		property "sonar.projectKey", projectGroupName
		property "sonar.projectVersion", projectVersion
		property "sonar.host.url", sonarqubeUrl
		property "sonar.login", sonarqubeToken
		property "sonar.jacoco.reportPaths", "**/build/jacoco/test.exec"
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'jacoco'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	sourceCompatibility = projectSourceCompatibility
	targetCompatibility = projectTargetCompatibility

	test {
		useJUnitPlatform()
	}

	jacocoTestReport {
		reports {
			xml.enabled = true
			csv.enabled = false
		}
	}
	jacocoTestReport.dependsOn test

	repositories {
		mavenCentral()
	}

	dependencyManagement {
		dependencies {
			dependency "com.google.code.gson:gson:${gsonVersion}"
			dependency "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
			dependency "org.postgresql:postgresql:${postgresqlVersion}"
			dependency "commons-io:commons-io:${commonIOVersion}"
			dependency "com.spotify:docker-client:${dockerClientVersion}"
			dependency "org.glassfish.jersey.inject:jersey-hk2:${hk2libForDockerVersion}"

			dependency "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
			dependency "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
			dependency "io.rest-assured:rest-assured:${restAssuredVersion}"
		}
	}
	dependencies {
		implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")

		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		implementation 'org.springframework.cloud:spring-cloud-starter-config'

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.junit.jupiter:junit-jupiter'
		testImplementation 'org.mockito:mockito-junit-jupiter'
		testImplementation 'io.rest-assured:rest-assured'
	}
}